#!/bin/bash

load inquirer

required() {
  if [ "$1" = "" ]; then
    echo false
  else
    echo true
  fi
}

create() {
  local service_name=$1
  local service_schedule=${@:2:5}
  local service_command=${@:7}
  local is_quiet=false
  local is_cron_force_recreate=false

  if [ -n "$service_name" ] && [ -n "$service_schedule" ] && [ "$(array::length $service_schedule)" -eq "5" ] && [ -n "$service_command" ]; then
    is_quiet=true
  fi

  # while [[ $# -gt 0 ]]; do
  #   local key=$1
  #   local value=$2
  #   case $key in
  #   -f | --force-recreate)
  #     os::set_var is_cron_force_recreate true
  #     shift
  #     ;;
  #   -n | --name)
  #     service_name=$value
  #     shift
  #     shift
  #     ;;
  #   -s | --schedule)
  #     service_schedule=$value
  #     shift
  #     shift
  #     ;;
  #   -c | --command)
  #     service_command=$value
  #     shift
  #     shift
  #     ;;
  #   *)
  #     if [ "$(string::match $key ^-)" = "true" ]; then
  #       echo "[cron][create]: unknown parameter \"$key\""
  #       help
  #       exit 1
  #     fi

  #     # service_name=$key
  #     shift
  #     ;;
  #   esac
  # done

  # echo "service_name: $service_name"
  # echo "service_command: $service_command"
  # echo "service_schedule: $service_schedule"
  # echo "is_quiet: $is_quiet"
  # exit 0

  if [ "$service_name" = "" ]; then
    inquirer::text "cron service name:" service_name "" "service name is required" required
  fi

  if [ -z "$service_command" ]; then
    inquirer::text "service command:" service_command "" "service command is required" required
  fi

  # @TODO inquirer::text cannot input * symbol, so use _ instead of *
  if [ -z "$service_schedule" ]; then
    inquirer::text "service schedule(crontab.guru, use _ instead of *):" service_schedule "" "service schedule is required" required
  fi

  # @TODO
  local service_schedule_for_see=$(echo $service_schedule | sed -e "s%_%*%g")

  log::info ""
  log::info "create service ..."
  log::info "#################################"
  log::info "service_name: $service_name"
  log::info "service_command: $service_command"
  log::info "service_schedule: $service_schedule_for_see"
  log::info "#################################"

  if [ "$is_quiet" = "false" ]; then
    local yesno=('Yes' 'No')
    inquirer::select "is it ok ?" yesno answer
    if [ "$answer" != "Yes" ]; then
      exit 0
    fi

    if [ "$is_cron_force_recreate" = "false" ]; then
      if [ "$(cron_has_service $service_name)" = "true" ]; then
        local yesno=('Yes' 'No')
        inquirer::select "override ?" yesno answer
        if [ "$answer" != "Yes" ]; then
          exit 0
        fi

        is_cron_force_recreate=true
      fi
    fi

    if [ "$is_cron_force_recreate" = "true" ]; then
      cron::remove $service_name
    fi
  else
    if [ "$(cron_is_service_exist $service_name)" = "true" ]; then
      cron::remove $service_name
    fi
  fi

  cron::create $service_name "$service_schedule" "$service_command"
}

help() {
  echo "Create a cron service"
  echo ""
  echo "Usage:"
  echo "  zcron create [options] [name] [command] [schedule]"
  echo ""
  echo "Options:"
  echo "  -f, --force-recreate  Force recreate service"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  create $@
}

run() {
  core $@
}

run $@
